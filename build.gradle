plugins {
    id("java")
    id("org.springframework.boot") version "3.3.3"
    id("io.spring.dependency-management") version "1.1.6"
    id("org.openapi.generator") version "7.0.0"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom(annotationProcessor)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")

//	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
//	implementation("org.openapitools:openapi-generator-cli:7.0.0") {
//		exclude group: 'commons-logging', module: 'commons-logging'
//	}
    implementation("org.aspectj:aspectjweaver:1.9.19")
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.21'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'


    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    compileOnly("org.projectlombok:lombok")
    runtimeOnly("org.postgresql:postgresql")
    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sourceSets {
    named("main") {
        java {
            srcDir("$buildDir/generated/openapi/src/main/java")
        }
    }
}

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

tasks.register("apiJava", GenerateTask) {
    apiJava.generatorName.set("spring")
    apiJava.id = "apiJava"

    apiJava.inputSpec.set("$rootDir/docs/api.yaml")
    apiJava.outputDir.set("$buildDir/generated/openapi")
    // apiJava.validateSpec.set(false)

    apiJava.apiPackage.set("hr.ericsson.eb.car.adverts.api")
    apiJava.invokerPackage.set("hr.ericsson.eb.car.adverts")
    apiJava.modelPackage.set("hr.ericsson.eb.car.adverts.api.model")
    apiJava.configOptions = [
            "generatedConstructorWithRequiredArgs": "false",
            useJakartaEe                          : "true",
            useSpringBoot3                        : "true",
            serializableModel                     : "true",
            // delegatePattern: "true",
            interfaceOnly                         : "true",
            dateLibrary                           : "java8",
            additionalModelTypeAnnotations        : "@lombok.Builder(toBuilder = true);@lombok.NoArgsConstructor;@lombok.AllArgsConstructor"
    ]
}

tasks.compileJava.dependsOn('apiJava')